{"version":3,"file":"static/js/501.408b330d.chunk.js","mappings":"wMAEMA,E,QAAiBC,GAAAA,IAAH,qkBAQF,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,SAa/B,SAACH,GAAD,OAAWA,EAAMC,MAAMC,OAAOE,S,SC8B/C,EAxCmB,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,QAC/D,GAAwCC,EAAAA,EAAAA,WAAkB,GAA1D,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAkBC,EAAAA,EAAAA,QAAuB,OAG/CC,EAAAA,EAAAA,YAAU,WAIN,OAFAC,OAAOC,iBAAiB,QAASC,GAE1B,WACLF,OAAOG,oBAAoB,QAASD,MAGvC,CAACP,IAEJ,IAOMO,EAAwB,SAACE,GACvBP,EAAgBQ,UAAYR,EAAgBQ,QAAQC,SAASF,EAAEG,SAC/DX,GAAgB,IAGxB,OACI,UAACf,EAAD,CAAgB2B,IAAKX,EAArB,WACI,kBAAOT,KAAMO,EAAeP,EAAO,OAASA,EAAMC,KAAMA,EAAMC,MAAOA,EAAOC,YAAaA,EAAakB,SAAUjB,IAG5GC,IACI,SAAC,MAAD,CAAoBiB,QAAUf,EAflB,WACxBC,GAAgB,IAJO,WACvBA,GAAgB,W,iKC1BlBe,EAAY7B,EAAAA,GAAAA,IAAH,kjDAyBW8B,EAAAA,GAeT,SAAA7B,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SAK5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,SAK5B,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SAejB,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SAMnC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,S,GAalCJ,EAAAA,GAAAA,OAAH,kXAUY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SAMnC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,S,4BCxB7C,EAtEc,WAEZ,OAAkCQ,EAAAA,EAAAA,UAAgC,CAChEmB,MAAO,GACPC,SAAU,KAFZ,eAAOC,EAAP,KAAkBC,EAAlB,KAsBIC,GAAWC,EAAAA,EAAAA,MAMf,OACE,UAACP,EAAD,YACE,+CACE,mBACF,SAAC,IAAD,CACEQ,QAAS,KACTC,WAAY,CACV/B,KAAM,QACN8B,QAAS,KACTE,UAAU,GAEZ/B,MAAOyB,EAAUF,MACjBJ,SAAU,SAACI,GAAD,OAAmBG,GAAa,kBAAID,GAAL,IAAgBF,MAAAA,MACzDS,eAAe,qBACfC,WA/BkC,CAEtCC,aAAc,MACdC,MAAO,OACPC,SAAU,OACVC,MAAO,OACPC,QAAQ,QACRC,OAAQ,WA2BN,mBAEA,SAACC,EAAA,EAAD,CACE1C,KAAK,WACLC,KAAK,WACLE,YAAY,WACZC,aA9Ce,SAACY,GACpB,IAAM2B,GAAQ,UAAOhB,GACrBgB,EAAS3B,EAAEG,OAAOlB,MAAQe,EAAEG,OAAOjB,MACnC0B,EAAae,IA4CTzC,MAAOyB,EAAUD,SACjBrB,SAAS,KAGX,mBAEA,+CACA,mBACA,mBAEA,mBAAQiB,QAtCQ,WAChBO,EAAS,eAqCT","sources":["components/Custom_InputField/InputFieldStyle.ts","components/Custom_InputField/InputField.tsx","pages/Login/LoginStyle.ts","pages/Login/Login.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Inputcontainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 1rem;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background: ${(props) => props.theme.colors.white};\r\n    outline: none;\r\n\r\n    input {\r\n        border: 0;\r\n        width: 100%;\r\n        font-size: 16px;\r\n        // color: #555;\r\n        height: 4rem;\r\n        outline: none;\r\n    }\r\n\r\n    svg {\r\n        color: ${(props) => props.theme.colors.black};\r\n\r\n    }\r\n\r\n    &:focus {\r\n        border: 1px solid #aaa;\r\n    }\r\n\r\n    @media screen and (max-width: 900px) {\r\n        // padding: 2rem;\r\n    }\r\n\r\n\r\n\r\n`;\r\n\r\nexport { Inputcontainer };\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport { AiFillEyeInvisible } from 'react-icons/ai';\r\nimport { Inputcontainer } from './InputFieldStyle';\r\n\r\ninterface I_InputData {\r\n    type: string,\r\n    placeholder: string,\r\n    value: string | number,\r\n    name: string,\r\n    handleChange:  (e: ChangeEvent<HTMLInputElement>) => void;\r\n    setIcon?: boolean;\r\n};\r\n\r\nconst InputField = ({type, name, value, placeholder, handleChange, setIcon}: I_InputData) => {\r\n    const [viewPassword, setViewPassword] = useState<boolean>(false);\r\n    const toggleContainer = useRef<HTMLDivElement>(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n        window.addEventListener('click', onClickOutsideHandler);\r\n\r\n        return () => {\r\n          window.removeEventListener('click', onClickOutsideHandler);\r\n        }\r\n        \r\n    }, [viewPassword])\r\n\r\n    const handleViewPassword = () => {\r\n        setViewPassword(true);\r\n    }\r\n    const handleClosePassword = () => {\r\n        setViewPassword(false);\r\n    }\r\n\r\n    const onClickOutsideHandler = (e: MouseEvent) => {\r\n        if (toggleContainer.current && !toggleContainer.current.contains(e.target as Node)) {\r\n            setViewPassword(false);\r\n        }\r\n    }\r\n    return (\r\n        <Inputcontainer ref={toggleContainer}>\r\n            <input type={viewPassword ? type = 'text' : type} name={name} value={value} placeholder={placeholder} onChange={handleChange}/> \r\n\r\n            {\r\n                setIcon && (\r\n                    <AiFillEyeInvisible onClick={!viewPassword ? handleViewPassword : handleClosePassword}/>\r\n                )\r\n            } \r\n        </Inputcontainer>\r\n    )\r\n}\r\n\r\nexport default InputField","import styled from \"styled-components\";\r\nimport { pic_1 } from \"../../constants/image\";\r\n\r\nconst Container = styled.div`\r\n\r\n    position: relative;\r\n    top: 0;\r\n    height: 33rem;\r\n    background: linear-gradient(to bottom, #7ed956 0%, #039525 100%);\r\n    color: #f1f1f1;\r\n    width: 100%;\r\n    transition: .7s ease;\r\n    opacity: 1;\r\n    color: white;\r\n    font-size: 20px;\r\n    padding: 20px;\r\n    z-index: 1;\r\n    border-radius: 1.2rem;\r\n\r\n    @media screen and (max-width: 900px) {\r\n        height: 40rem;\r\n    }\r\n\r\n    @media screen and (max-width: 550px) {\r\n        height: 36rem;\r\n    }\r\n\r\n    &:before {\r\n        background: url(${pic_1}) 0 0 no-repeat;\r\n        background-size: cover;\r\n        width: 100%;\r\n        height: 152px;\r\n        position: absolute;\r\n        border-radius: 1.2rem;\r\n        left: 0;\r\n        bottom: 0;\r\n        content: '';\r\n    }\r\n\r\n    \r\n    h3 {\r\n        text-align: center;\r\n        font-size: 1.1rem;\r\n        color: ${props => props.theme.colors.white};\r\n    }\r\n    \r\n    h5 {\r\n        font-size: 0.9rem;\r\n        color: ${props => props.theme.colors.black};\r\n        text-align: center;\r\n\r\n        &:hover {\r\n        cursor: pointer;\r\n        color: ${props => props.theme.colors.white};\r\n    }\r\n    \r\n    }\r\n\r\n    button {\r\n        width: 60%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        margin: 0 auto;\r\n\r\n        height: 2.8rem;\r\n        border-radius: 0.5rem;\r\n        background: transparent;\r\n        border: 1px solid ${props => props.theme.colors.white};\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            background: black;\r\n            color: ${props => props.theme.colors.white};\r\n        }\r\n\r\n        @media screen and (max-width: 900px) {\r\n            height: 4rem;\r\n        }\r\n    }\r\n      \r\n}  \r\n    \r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n    width: 60%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0 auto;\r\n\r\n    height: 2.8rem;\r\n    border-radius: 0.5rem;\r\n    background: transparent;\r\n    border: 1px solid ${props => props.theme.colors.white};\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        background: black;\r\n        color: ${props => props.theme.colors.white};\r\n    }\r\n\r\n`;\r\n\r\nexport { Container, Button };","import React, { ChangeEvent, useState } from 'react'\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Container } from './LoginStyle'\r\n\r\nimport InputField from '../../components/Custom_InputField/InputField'\r\n\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Login = () => {\r\n\r\n  const [formValue, setFormValue] = useState<Record<string,string>>({\r\n    phone: \"\",\r\n    password: \"\",\r\n  })\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const getValue = {...formValue}\r\n    getValue[e.target.name] = e.target.value\r\n    setFormValue(getValue)\r\n  }\r\n\r\n  const styleInput: Record<string, any> = { \r\n   \r\n    borderRadius: \"4px\",\r\n    width: \"100%\",\r\n    fontSize: \"16px\",\r\n    color: \"#555\",\r\n    outline:\" none\",\r\n    height: \"4rem\",\r\n    \r\n  }\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const handleRoute = () : void => {\r\n      navigate('/dashboard');\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h3>Let's Get Started</h3>\r\n        <br/>\r\n      <PhoneInput\r\n        country={\"ng\"}\r\n        inputProps={{\r\n          name: \"phone\",\r\n          country: \"ng\",\r\n          required: true,\r\n        }}\r\n        value={formValue.phone}\r\n        onChange={(phone: string) => setFormValue({...formValue, phone})}\r\n        containerClass=\"my-container-class\"\r\n        inputStyle={styleInput}\r\n      />\r\n\r\n      <br/>\r\n        \r\n      <InputField\r\n        type='password'\r\n        name=\"password\"\r\n        placeholder=\"Password\"\r\n        handleChange={handleChange}\r\n        value={formValue.password}\r\n        setIcon={true}\r\n      />\r\n\r\n      <br/>\r\n\r\n      <h5>Forgot Password ?</h5>\r\n      <br/>\r\n      <br/>\r\n\r\n      <button onClick={handleRoute}>LOGIN</button>\r\n        \r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Login"],"names":["Inputcontainer","styled","props","theme","colors","white","black","type","name","value","placeholder","handleChange","setIcon","useState","viewPassword","setViewPassword","toggleContainer","useRef","useEffect","window","addEventListener","onClickOutsideHandler","removeEventListener","e","current","contains","target","ref","onChange","onClick","Container","pic_1","phone","password","formValue","setFormValue","navigate","useNavigate","country","inputProps","required","containerClass","inputStyle","borderRadius","width","fontSize","color","outline","height","InputField","getValue"],"sourceRoot":""}